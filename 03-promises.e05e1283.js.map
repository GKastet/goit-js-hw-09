{"mappings":"AACA,MAAMA,EAAW,CACfC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,oBACnCE,UAAWH,SAASC,cAAc,mBAClCG,YAAaJ,SAASC,cAAc,sBAIhCI,EAAaC,OAAOR,EAASI,WAAWK,OACxCC,EAAYF,OAAOR,EAASK,UAAUI,OACtCE,EAASH,OAAOR,EAASM,YAAYG,OAkB3C,SAASG,EAAcC,EAAUC,GAc/B,OAZgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACaC,KAAKC,SAAW,GAGpCJ,IAGAC,GAAQ,GAETH,EAAM,G,CAzBbd,EAASC,KAAKoB,iBAAiB,UAC/B,WACE,IAAIC,EAAef,EACnB,IAAK,IAAIgB,EAAI,EAAGA,GAAKZ,EAAQY,GAAK,EAChCD,GAAgBZ,EAChBE,EAAcW,EAAGD,GAChBE,KAAKC,QAAQC,IAAI,uBAAqBb,eAAiBC,YAAYa,MACjEF,QAAIC,IAAQ,sBAAKb,eAAgCC,W","sources":["src/js/03-promises.js"],"sourcesContent":["\nconst elements = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('[name = \"delay\"]'),\n  inputStep: document.querySelector('[name = \"step\"]'),\n  inputAmount: document.querySelector('[name = \"amount\"]'),\n  //btnSubmit: document.querySelector('button'),\n};\n\nconst delayStart = Number(elements.inputDelay.value);\nconst delayStep = Number(elements.inputStep.value);\nconst repeat = Number(elements.inputAmount.value);\n//console.log(elements.inputAmount.value);\n\n\n\nelements.form.addEventListener('submit', handlerFormSubmit);\nfunction handlerFormSubmit() {\n  let promiseDelay = delayStart;\n  for (let i = 1; i <= repeat; i += 1) {\n    promiseDelay += delayStep;\n    createPromise(i, promiseDelay)\n    .then(console.log(`✅ Fulfilled promise ${position} in ${delay}ms`))\n    .catch(console.log(`❌ Rejected promise ${position} in ${delay}ms`));\n  }\n  //console.log(promiseDelay);\n  // console.log(elements.inputAmount);\n}\n//=========================i+1\nfunction createPromise(position, delay) {\n  // const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(()=>{\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve()       \n      } else {\n        // Reject    \n        reject()\n      }\n    }, delay)\n  });\n  return promise  \n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n//=====================================================\n\n\n// const form = document.querySelector('form'); // знаходимо форму на сторінці\n// const amountInput = form.querySelector('input[name=\"amount\"]'); // знаходимо поле для вводу кількості промісів\n// const resultContainer = document.querySelector('#result'); // знаходимо контейнер для результатів\n\n// form.addEventListener('submit', async function(event) {\n//   event.preventDefault(); // відміна дії за замовчуванням\n  \n//   resultContainer.innerHTML = ''; // очистити результати від попереднього запиту\n  \n//   const amount = Number(amountInput.value); // зчитуємо кількість промісів з поля вводу\n//   const delay = 1000; // стандартна затримка\n  \n//   for (let i = 1; i <= amount; i++) {\n//     const promise = createPromise(i, delay + (i - 1) * delay); // створюємо проміс з номером та затримкою\n//     await handlePromise(promise); // очікуємо виконання промісу\n//   }\n// });\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({position, delay});\n//       } else {\n//         reject({position, delay});\n//       }\n//     }, delay);\n//   });\n// }\n\n// function handlePromise(promise) {\n//   return promise\n//     .then(({position, delay}) => {\n//       resultContainer.innerHTML += `<p>Promise ${position} was resolved with delay ${delay} ms.</p>`;\n//     })\n//     .catch(({position, delay}) => {\n//       resultContainer.innerHTML += `<p>Promise ${position} was rejected with delay ${delay} ms.</p>`;\n//     });\n// }\n\n\n\n\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n"],"names":["$47d4ff9957288465$var$elements","form","document","querySelector","inputDelay","inputStep","inputAmount","$47d4ff9957288465$var$delayStart","Number","value","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$repeat","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","promiseDelay","i","then","console","log","catch"],"version":3,"file":"03-promises.e05e1283.js.map"}